import {
  AnimatePresence,
  Combination_default,
  StylesProvider,
  cancelSync,
  chakra,
  es2015_default,
  es_default,
  forwardRef,
  getFrameData,
  hideOthers,
  motion,
  omitThemingProps,
  require_copy_to_clipboard,
  require_lodash,
  useMultiStyleConfig,
  usePresence,
  useStyleConfig,
  useStyles,
  useTheme
} from "./chunk-SBB6CN3S.js";
import "./chunk-ZHH23QOP.js";
import "./chunk-GY6CGLY3.js";
import "./chunk-CZE5UKLL.js";
import "./chunk-CK2HTOUO.js";
import "./chunk-IN34DJ7O.js";
import "./chunk-JG3BSTLK.js";
import "./chunk-YHIESISI.js";
import {
  require_react_dom
} from "./chunk-MJG7UDFP.js";
import {
  require_react
} from "./chunk-7FITP5SS.js";
import {
  __toModule
} from "./chunk-WC6BDPVA.js";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chakra-ui-utils.esm.js
var import_lodash = __toModule(require_lodash());
function isNumber(value) {
  return typeof value === "number";
}
function isFunction(value) {
  return typeof value === "function";
}
var __DEV__ = true;
function get(obj, path, fallback, index) {
  var key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize = function memoize2(fn) {
  var cache = new WeakMap();
  var memoizedFn = function memoizedFn2(obj, path, fallback, index) {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, new Map());
    }
    var map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    var value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize(get);
function getEventWindow(event) {
  var _view;
  return (_view = event.view) != null ? _view : window;
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser = canUseDOM();
var cx = function cx2() {
  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {
    classNames[_key] = arguments[_key];
  }
  return classNames.filter(Boolean).join(" ");
};
function addDomEvent(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return function() {
    target.removeEventListener(eventName, handler, options);
  };
}
var focusableElList = ["input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "embed", "iframe", "object", "a[href]", "area[href]", "button:not([disabled])", "[tabindex]", "audio[controls]", "video[controls]", "*[tabindex]:not([aria-disabled])", "*[contenteditable]"];
var focusableElSelector = focusableElList.join();
function callAllHandlers() {
  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }
  return function func(event) {
    fns.some(function(fn) {
      fn == null ? void 0 : fn(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}
function once(fn) {
  var result;
  return function func() {
    if (fn) {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var noop = function noop2() {
};
var warn = once(function(options) {
  return function() {
    var condition = options.condition, message = options.message;
    if (condition && __DEV__) {
      console.warn(message);
    }
  };
});
var error = once(function(options) {
  return function() {
    var condition = options.condition, message = options.message;
    if (condition && __DEV__) {
      console.error(message);
    }
  };
});
var pipe = function pipe2() {
  for (var _len6 = arguments.length, fns = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    fns[_key6] = arguments[_key6];
  }
  return function(v) {
    return fns.reduce(function(a, b) {
      return b(a);
    }, v);
  };
};
var distance1D = function distance1D2(a, b) {
  return Math.abs(a - b);
};
var isPoint = function isPoint2(point) {
  return "x" in point && "y" in point;
};
function distance(a, b) {
  if (isNumber(a) && isNumber(b)) {
    return distance1D(a, b);
  }
  if (isPoint(a) && isPoint(b)) {
    var xDelta = distance1D(a.x, b.x);
    var yDelta = distance1D(a.y, b.y);
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2));
  }
  return 0;
}
var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function isMouseEvent(event) {
  var win = getEventWindow(event);
  if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof win.MouseEvent;
}
function isTouchEvent(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var win = getEventWindow(event);
    var isMouseEvent3 = event instanceof win.MouseEvent;
    var isPrimaryPointer = !isMouseEvent3 || isMouseEvent3 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = {
  pageX: 0,
  pageY: 0
};
function pointFromTouch(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
var wrapPointerEventHandler = function wrapPointerEventHandler2(handler, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function listener2(event) {
    return handler(event, extractEventInfo(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};
var supportsPointerEvents = function supportsPointerEvents2() {
  return isBrowser && window.onpointerdown === null;
};
var supportsTouchEvents = function supportsTouchEvents2() {
  return isBrowser && window.ontouchstart === null;
};
var supportsMouseEvents = function supportsMouseEvents2() {
  return isBrowser && window.onmousedown === null;
};
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName(name) {
  if (supportsPointerEvents()) {
    return name;
  }
  if (supportsTouchEvents()) {
    return touchEventNames[name];
  }
  if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === "pointerdown"), options);
}
function isMultiTouchEvent(event) {
  return isTouchEvent(event) && event.touches.length > 1;
}
var PanSession = function() {
  function PanSession3(_event, handlers, threshold) {
    var _this = this;
    this.history = [];
    this.startEvent = null;
    this.lastEvent = null;
    this.lastEventInfo = null;
    this.handlers = {};
    this.removeListeners = noop;
    this.threshold = 3;
    this.win = void 0;
    this.updatePoint = function() {
      if (!(_this.lastEvent && _this.lastEventInfo))
        return;
      var info = getPanInfo(_this.lastEventInfo, _this.history);
      var isPanStarted = _this.startEvent !== null;
      var isDistancePastThreshold = distance(info.offset, {
        x: 0,
        y: 0
      }) >= _this.threshold;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      var _getFrameData = getFrameData(), timestamp = _getFrameData.timestamp;
      _this.history.push(_extends({}, info.point, {
        timestamp
      }));
      var _this$handlers = _this.handlers, onStart = _this$handlers.onStart, onMove = _this$handlers.onMove;
      if (!isPanStarted) {
        onStart == null ? void 0 : onStart(_this.lastEvent, info);
        _this.startEvent = _this.lastEvent;
      }
      onMove == null ? void 0 : onMove(_this.lastEvent, info);
    };
    this.onPointerMove = function(event, info) {
      _this.lastEvent = event;
      _this.lastEventInfo = info;
      if (isMouseEvent(event) && event.buttons === 0) {
        _this.onPointerUp(event, info);
        return;
      }
      es_default.update(_this.updatePoint, true);
    };
    this.onPointerUp = function(event, info) {
      var panInfo = getPanInfo(info, _this.history);
      var _this$handlers2 = _this.handlers, onEnd = _this$handlers2.onEnd, onSessionEnd = _this$handlers2.onSessionEnd;
      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);
      _this.end();
      if (!onEnd || !_this.startEvent)
        return;
      onEnd == null ? void 0 : onEnd(event, panInfo);
    };
    this.win = getEventWindow(_event);
    if (isMultiTouchEvent(_event))
      return;
    this.handlers = handlers;
    if (threshold) {
      this.threshold = threshold;
    }
    _event.stopPropagation();
    _event.preventDefault();
    var _info = extractEventInfo(_event);
    var _getFrameData2 = getFrameData(), _timestamp = _getFrameData2.timestamp;
    this.history = [_extends({}, _info.point, {
      timestamp: _timestamp
    })];
    var onSessionStart = handlers.onSessionStart;
    onSessionStart == null ? void 0 : onSessionStart(_event, getPanInfo(_info, this.history));
    this.removeListeners = pipe(addPointerEvent(this.win, "pointermove", this.onPointerMove), addPointerEvent(this.win, "pointerup", this.onPointerUp), addPointerEvent(this.win, "pointercancel", this.onPointerUp));
  }
  var _proto = PanSession3.prototype;
  _proto.updateHandlers = function updateHandlers(handlers) {
    this.handlers = handlers;
  };
  _proto.end = function end() {
    var _this$removeListeners;
    (_this$removeListeners = this.removeListeners) == null ? void 0 : _this$removeListeners.call(this);
    cancelSync.update(this.updatePoint);
  };
  return PanSession3;
}();
function subtractPoint(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
function startPanPoint(history) {
  return history[0];
}
function lastPanPoint(history) {
  return history[history.length - 1];
}
function getPanInfo(info, history) {
  return {
    point: info.point,
    delta: subtractPoint(info.point, lastPanPoint(history)),
    offset: subtractPoint(info.point, startPanPoint(history)),
    velocity: getVelocity(history, 0.1)
  };
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
var toMilliseconds = function toMilliseconds2(seconds) {
  return seconds * 1e3;
};
function getVelocity(history, timeDelta) {
  if (history.length < 2) {
    return {
      x: 0,
      y: 0
    };
  }
  var i = history.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return {
      x: 0,
      y: 0
    };
  }
  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return {
      x: 0,
      y: 0
    };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
var breakpoints = Object.freeze(["base", "sm", "md", "lg", "xl", "2xl"]);

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/icon/dist/chakra-ui-icon.esm.js
var React = __toModule(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded = ["as", "viewBox", "color", "focusable", "children", "className", "__css"];
var fallbackIcon = {
  path: React.createElement("g", {
    stroke: "currentColor",
    strokeWidth: "1.5"
  }, React.createElement("path", {
    strokeLinecap: "round",
    fill: "none",
    d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
  }), React.createElement("path", {
    fill: "currentColor",
    strokeLinecap: "round",
    d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
  }), React.createElement("circle", {
    fill: "none",
    strokeMiterlimit: "10",
    cx: "12",
    cy: "12",
    r: "11.25"
  })),
  viewBox: "0 0 24 24"
};
var Icon = forwardRef(function(props, ref) {
  var element = props.as, viewBox = props.viewBox, _props$color = props.color, color = _props$color === void 0 ? "currentColor" : _props$color, _props$focusable = props.focusable, focusable = _props$focusable === void 0 ? false : _props$focusable, children = props.children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _className = cx("chakra-icon", className);
  var styles = _extends2({
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color
  }, __css);
  var shared = {
    ref,
    focusable,
    className: _className,
    __css: styles
  };
  var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
  if (element && typeof element !== "string") {
    return React.createElement(chakra.svg, _extends2({
      as: element
    }, shared, rest));
  }
  var _path = children != null ? children : fallbackIcon.path;
  return React.createElement(chakra.svg, _extends2({
    verticalAlign: "middle",
    viewBox: _viewBox
  }, shared, rest), _path);
});
if (__DEV__) {
  Icon.displayName = "Icon";
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/close-button/dist/chakra-ui-close-button.esm.js
var React2 = __toModule(require_react());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var _excluded2 = ["children", "isDisabled", "__css"];
var CloseIcon = function CloseIcon2(props) {
  return React2.createElement(Icon, _extends3({
    focusable: "false",
    "aria-hidden": true
  }, props), React2.createElement("path", {
    fill: "currentColor",
    d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
  }));
};
var CloseButton = forwardRef(function(props, ref) {
  var styles = useStyleConfig("CloseButton", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, isDisabled2 = _omitThemingProps.isDisabled, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded2);
  var baseStyle = {
    outline: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
  };
  return React2.createElement(chakra.button, _extends3({
    type: "button",
    "aria-label": "Close",
    ref,
    disabled: isDisabled2,
    __css: _extends3({}, baseStyle, styles, __css)
  }, rest), children || React2.createElement(CloseIcon, {
    width: "1em",
    height: "1em"
  }));
});
if (__DEV__) {
  CloseButton.displayName = "CloseButton";
}

// node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
var React3 = __toModule(require_react());

// node_modules/@chakra-ui/focus-lock/node_modules/@chakra-ui/utils/dist/chakra-ui-utils.esm.js
var import_lodash2 = __toModule(require_lodash());
function isNumber2(value) {
  return typeof value === "number";
}
var __DEV__2 = true;
function get2(obj, path, fallback, index) {
  var key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize3 = function memoize4(fn) {
  var cache = new WeakMap();
  var memoizedFn = function memoizedFn2(obj, path, fallback, index) {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, new Map());
    }
    var map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    var value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet2 = memoize3(get2);
function isElement(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement(el) {
  var _el$ownerDocument$def;
  if (!isElement(el)) {
    return false;
  }
  var win = (_el$ownerDocument$def = el.ownerDocument.defaultView) != null ? _el$ownerDocument$def : window;
  return el instanceof win.HTMLElement;
}
function getOwnerDocument(node) {
  var _node$ownerDocument;
  return isElement(node) ? (_node$ownerDocument = node.ownerDocument) != null ? _node$ownerDocument : document : document;
}
function getEventWindow2(event) {
  var _view;
  return (_view = event.view) != null ? _view : window;
}
function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser2 = canUseDOM2();
function addDomEvent2(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return function() {
    target.removeEventListener(eventName, handler, options);
  };
}
var hasTabIndex = function hasTabIndex2(element) {
  return element.hasAttribute("tabindex");
};
function isDisabled(element) {
  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isInputElement(element) {
  return isHTMLElement(element) && element.tagName.toLowerCase() === "input" && "select" in element;
}
function isActiveElement(element) {
  var doc = isHTMLElement(element) ? getOwnerDocument(element) : document;
  return doc.activeElement === element;
}
function isHidden(element) {
  if (element.parentElement && isHidden(element.parentElement))
    return true;
  return element.hidden;
}
function isContentEditable(element) {
  var value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isFocusable(element) {
  if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) {
    return false;
  }
  var localName = element.localName;
  var focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  var others = {
    a: function a() {
      return element.hasAttribute("href");
    },
    audio: function audio() {
      return element.hasAttribute("controls");
    },
    video: function video() {
      return element.hasAttribute("controls");
    }
  };
  if (localName in others) {
    return others[localName]();
  }
  if (isContentEditable(element))
    return true;
  return hasTabIndex(element);
}
var focusableElList2 = ["input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "embed", "iframe", "object", "a[href]", "area[href]", "button:not([disabled])", "[tabindex]", "audio[controls]", "video[controls]", "*[tabindex]:not([aria-disabled])", "*[contenteditable]"];
var focusableElSelector2 = focusableElList2.join();
function getAllFocusable(container) {
  var focusableEls = Array.from(container.querySelectorAll(focusableElSelector2));
  focusableEls.unshift(container);
  return focusableEls.filter(isFocusable).filter(function(el) {
    return window.getComputedStyle(el).display !== "none";
  });
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function once2(fn) {
  var result;
  return function func() {
    if (fn) {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var noop3 = function noop4() {
};
var warn2 = once2(function(options) {
  return function() {
    var condition = options.condition, message = options.message;
    if (condition && __DEV__2) {
      console.warn(message);
    }
  };
});
var error2 = once2(function(options) {
  return function() {
    var condition = options.condition, message = options.message;
    if (condition && __DEV__2) {
      console.error(message);
    }
  };
});
var pipe3 = function pipe4() {
  for (var _len6 = arguments.length, fns = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    fns[_key6] = arguments[_key6];
  }
  return function(v) {
    return fns.reduce(function(a, b) {
      return b(a);
    }, v);
  };
};
var distance1D3 = function distance1D4(a, b) {
  return Math.abs(a - b);
};
var isPoint3 = function isPoint4(point) {
  return "x" in point && "y" in point;
};
function distance2(a, b) {
  if (isNumber2(a) && isNumber2(b)) {
    return distance1D3(a, b);
  }
  if (isPoint3(a) && isPoint3(b)) {
    var xDelta = distance1D3(a.x, b.x);
    var yDelta = distance1D3(a.y, b.y);
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2));
  }
  return 0;
}
function focus(element, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$isActive = _options.isActive, isActive = _options$isActive === void 0 ? isActiveElement : _options$isActive, nextTick = _options.nextTick, _options$preventScrol = _options.preventScroll, preventScroll = _options$preventScrol === void 0 ? true : _options$preventScrol, _options$selectTextIf = _options.selectTextIfInput, selectTextIfInput = _options$selectTextIf === void 0 ? true : _options$selectTextIf;
  if (!element || isActive(element))
    return -1;
  function triggerFocus() {
    if (!element) {
      warn2({
        condition: true,
        message: "[chakra-ui]: can't call focus() on `null` or `undefined` element"
      });
      return;
    }
    if (supportsPreventScroll()) {
      element.focus({
        preventScroll
      });
    } else {
      element.focus();
      if (preventScroll) {
        var scrollableElements = getScrollableElements(element);
        restoreScrollPosition(scrollableElements);
      }
    }
    if (isInputElement(element) && selectTextIfInput) {
      element.select();
    }
  }
  if (nextTick) {
    return requestAnimationFrame(triggerFocus);
  }
  triggerFocus();
  return -1;
}
var supportsPreventScrollCached = null;
function supportsPreventScroll() {
  if (supportsPreventScrollCached == null) {
    supportsPreventScrollCached = false;
    try {
      var div = document.createElement("div");
      div.focus({
        get preventScroll() {
          supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
    }
  }
  return supportsPreventScrollCached;
}
function getScrollableElements(element) {
  var _doc$defaultView;
  var doc = getOwnerDocument(element);
  var win = (_doc$defaultView = doc.defaultView) != null ? _doc$defaultView : window;
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = doc.scrollingElement || doc.documentElement;
  while (parent instanceof win.HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    }
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof win.HTMLElement) {
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  }
  return scrollableElements;
}
function restoreScrollPosition(scrollableElements) {
  for (var _iterator = _createForOfIteratorHelperLoose(scrollableElements), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, element = _step$value.element, scrollTop = _step$value.scrollTop, scrollLeft = _step$value.scrollLeft;
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
var minSafeInteger2 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger2 = Number.MAX_SAFE_INTEGER || 9007199254740991;
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function isMouseEvent2(event) {
  var win = getEventWindow2(event);
  if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof win.MouseEvent;
}
function isTouchEvent2(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}
function filterPrimaryPointer2(eventHandler) {
  return function(event) {
    var win = getEventWindow2(event);
    var isMouseEvent3 = event instanceof win.MouseEvent;
    var isPrimaryPointer = !isMouseEvent3 || isMouseEvent3 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint2 = {
  pageX: 0,
  pageY: 0
};
function pointFromTouch2(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint2;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse2(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo2(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent2(event) ? pointFromTouch2(event, pointType) : pointFromMouse2(event, pointType)
  };
}
var wrapPointerEventHandler3 = function wrapPointerEventHandler4(handler, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function listener2(event) {
    return handler(event, extractEventInfo2(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer2(listener) : listener;
};
var supportsPointerEvents3 = function supportsPointerEvents4() {
  return isBrowser2 && window.onpointerdown === null;
};
var supportsTouchEvents3 = function supportsTouchEvents4() {
  return isBrowser2 && window.ontouchstart === null;
};
var supportsMouseEvents3 = function supportsMouseEvents4() {
  return isBrowser2 && window.onmousedown === null;
};
var mouseEventNames2 = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames2 = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName2(name) {
  if (supportsPointerEvents3()) {
    return name;
  }
  if (supportsTouchEvents3()) {
    return touchEventNames2[name];
  }
  if (supportsMouseEvents3()) {
    return mouseEventNames2[name];
  }
  return name;
}
function addPointerEvent2(target, eventName, handler, options) {
  return addDomEvent2(target, getPointerEventName2(eventName), wrapPointerEventHandler3(handler, eventName === "pointerdown"), options);
}
function isMultiTouchEvent2(event) {
  return isTouchEvent2(event) && event.touches.length > 1;
}
var PanSession2 = function() {
  function PanSession3(_event, handlers, threshold) {
    var _this = this;
    this.history = [];
    this.startEvent = null;
    this.lastEvent = null;
    this.lastEventInfo = null;
    this.handlers = {};
    this.removeListeners = noop3;
    this.threshold = 3;
    this.win = void 0;
    this.updatePoint = function() {
      if (!(_this.lastEvent && _this.lastEventInfo))
        return;
      var info = getPanInfo2(_this.lastEventInfo, _this.history);
      var isPanStarted = _this.startEvent !== null;
      var isDistancePastThreshold = distance2(info.offset, {
        x: 0,
        y: 0
      }) >= _this.threshold;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      var _getFrameData = getFrameData(), timestamp = _getFrameData.timestamp;
      _this.history.push(_extends4({}, info.point, {
        timestamp
      }));
      var _this$handlers = _this.handlers, onStart = _this$handlers.onStart, onMove = _this$handlers.onMove;
      if (!isPanStarted) {
        onStart == null ? void 0 : onStart(_this.lastEvent, info);
        _this.startEvent = _this.lastEvent;
      }
      onMove == null ? void 0 : onMove(_this.lastEvent, info);
    };
    this.onPointerMove = function(event, info) {
      _this.lastEvent = event;
      _this.lastEventInfo = info;
      if (isMouseEvent2(event) && event.buttons === 0) {
        _this.onPointerUp(event, info);
        return;
      }
      es_default.update(_this.updatePoint, true);
    };
    this.onPointerUp = function(event, info) {
      var panInfo = getPanInfo2(info, _this.history);
      var _this$handlers2 = _this.handlers, onEnd = _this$handlers2.onEnd, onSessionEnd = _this$handlers2.onSessionEnd;
      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);
      _this.end();
      if (!onEnd || !_this.startEvent)
        return;
      onEnd == null ? void 0 : onEnd(event, panInfo);
    };
    this.win = getEventWindow2(_event);
    if (isMultiTouchEvent2(_event))
      return;
    this.handlers = handlers;
    if (threshold) {
      this.threshold = threshold;
    }
    _event.stopPropagation();
    _event.preventDefault();
    var _info = extractEventInfo2(_event);
    var _getFrameData2 = getFrameData(), _timestamp = _getFrameData2.timestamp;
    this.history = [_extends4({}, _info.point, {
      timestamp: _timestamp
    })];
    var onSessionStart = handlers.onSessionStart;
    onSessionStart == null ? void 0 : onSessionStart(_event, getPanInfo2(_info, this.history));
    this.removeListeners = pipe3(addPointerEvent2(this.win, "pointermove", this.onPointerMove), addPointerEvent2(this.win, "pointerup", this.onPointerUp), addPointerEvent2(this.win, "pointercancel", this.onPointerUp));
  }
  var _proto = PanSession3.prototype;
  _proto.updateHandlers = function updateHandlers(handlers) {
    this.handlers = handlers;
  };
  _proto.end = function end() {
    var _this$removeListeners;
    (_this$removeListeners = this.removeListeners) == null ? void 0 : _this$removeListeners.call(this);
    cancelSync.update(this.updatePoint);
  };
  return PanSession3;
}();
function subtractPoint2(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
function startPanPoint2(history) {
  return history[0];
}
function lastPanPoint2(history) {
  return history[history.length - 1];
}
function getPanInfo2(info, history) {
  return {
    point: info.point,
    delta: subtractPoint2(info.point, lastPanPoint2(history)),
    offset: subtractPoint2(info.point, startPanPoint2(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function lastDevicePoint2(history) {
  return history[history.length - 1];
}
var toMilliseconds3 = function toMilliseconds4(seconds) {
  return seconds * 1e3;
};
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return {
      x: 0,
      y: 0
    };
  }
  var i = history.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint2(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds3(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return {
      x: 0,
      y: 0
    };
  }
  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return {
      x: 0,
      y: 0
    };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
var breakpoints2 = Object.freeze(["base", "sm", "md", "lg", "xl", "2xl"]);

// node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
var FocusLock = function FocusLock2(props) {
  var initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, contentRef = props.contentRef, restoreFocus = props.restoreFocus, children = props.children, isDisabled2 = props.isDisabled, autoFocus = props.autoFocus, persistentFocus = props.persistentFocus, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
  var onActivation = React3.useCallback(function() {
    if (initialFocusRef != null && initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef != null && contentRef.current) {
      var focusables = getAllFocusable(contentRef.current);
      if (focusables.length === 0) {
        focus(contentRef.current, {
          nextTick: true
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  var onDeactivation = React3.useCallback(function() {
    var _finalFocusRef$curren;
    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();
  }, [finalFocusRef]);
  var returnFocus = restoreFocus && !finalFocusRef;
  return React3.createElement(es2015_default, {
    crossFrame: lockFocusAcrossFrames,
    persistentFocus,
    autoFocus,
    disabled: isDisabled2,
    onActivation,
    onDeactivation,
    returnFocus
  }, children);
};
if (__DEV__2) {
  FocusLock.displayName = "FocusLock";
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/chakra-ui-react-utils.esm.js
var React4 = __toModule(require_react());
function assignRef(ref, value) {
  if (ref == null)
    return;
  if (isFunction(ref)) {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error3) {
    throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
  }
}
function mergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return function(node) {
    refs.forEach(function(ref) {
      return assignRef(ref, node);
    });
  };
}
function createContext2(options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$strict = _options.strict, strict = _options$strict === void 0 ? true : _options$strict, _options$errorMessage = _options.errorMessage, errorMessage = _options$errorMessage === void 0 ? "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider" : _options$errorMessage, name = _options.name;
  var Context = React4.createContext(void 0);
  Context.displayName = name;
  function useContext3() {
    var context = React4.useContext(Context);
    if (!context && strict) {
      var error3 = new Error(errorMessage);
      error3.name = "ContextError";
      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error3, useContext3);
      throw error3;
    }
    return context;
  }
  return [Context.Provider, useContext3, Context];
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/portal/dist/chakra-ui-portal.esm.js
var React7 = __toModule(require_react());

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/hooks/dist/chakra-ui-hooks.esm.js
var React6 = __toModule(require_react());
var import_react2 = __toModule(require_react());

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/hooks/dist/use-animation-state-5e0537c8.esm.js
var React5 = __toModule(require_react());
var import_react = __toModule(require_react());
var useSafeLayoutEffect = isBrowser ? React5.useLayoutEffect : React5.useEffect;

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/hooks/dist/chakra-ui-hooks.esm.js
var import_copy_to_clipboard = __toModule(require_copy_to_clipboard());
var defaultIdContext = {
  current: 1
};
var IdContext = React6.createContext(defaultIdContext);
var IdProvider = React6.memo(function(_ref) {
  var children = _ref.children;
  return React6.createElement(IdContext.Provider, {
    value: {
      current: 1
    }
  }, children);
});
var genId = function genId2(context) {
  return context.current++;
};
function useId(idProp, prefix) {
  var context = React6.useContext(IdContext);
  var _React$useState = React6.useState(context.current), id = _React$useState[0], setId = _React$useState[1];
  React6.useEffect(function() {
    setId(genId(context));
  }, [context]);
  return React6.useMemo(function() {
    return idProp || [prefix, id].filter(Boolean).join("-");
  }, [idProp, prefix, id]);
}
function useIds(idProp) {
  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    prefixes[_key - 1] = arguments[_key];
  }
  var id = useId(idProp);
  return React6.useMemo(function() {
    return prefixes.map(function(prefix) {
      return prefix + "-" + id;
    });
  }, [id, prefixes]);
}
function useUnmountEffect(fn, deps) {
  if (deps === void 0) {
    deps = [];
  }
  return React6.useEffect(function() {
    return function() {
      return fn();
    };
  }, deps);
}
function useForceUpdate() {
  var unloadingRef = React6.useRef(false);
  var _React$useState = React6.useState(0), count = _React$useState[0], setCount = _React$useState[1];
  useUnmountEffect(function() {
    unloadingRef.current = true;
  });
  return React6.useCallback(function() {
    if (!unloadingRef.current) {
      setCount(count + 1);
    }
  }, [count]);
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/portal/dist/chakra-ui-portal.esm.js
var import_react_dom = __toModule(require_react_dom());
var _createContext$1 = createContext2({
  strict: false,
  name: "PortalManagerContext"
});
var PortalManagerContextProvider = _createContext$1[0];
var usePortalManager = _createContext$1[1];
function PortalManager(props) {
  var children = props.children, zIndex = props.zIndex;
  return React7.createElement(PortalManagerContextProvider, {
    value: {
      zIndex
    }
  }, children);
}
if (__DEV__) {
  PortalManager.displayName = "PortalManager";
}
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded3 = ["containerRef"];
var _createContext = createContext2({
  strict: false,
  name: "PortalContext"
});
var PortalContextProvider = _createContext[0];
var usePortalContext = _createContext[1];
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = ".chakra-portal";
var Container = function Container2(props) {
  return React7.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
    }
  }, props.children);
};
var DefaultPortal = function DefaultPortal2(props) {
  var appendToParentPortal = props.appendToParentPortal, children = props.children;
  var tempNode = React7.useRef(null);
  var portal = React7.useRef(null);
  var forceUpdate = useForceUpdate();
  var parentPortal = usePortalContext();
  var manager2 = usePortalManager();
  useSafeLayoutEffect(function() {
    if (!tempNode.current)
      return;
    var doc = tempNode.current.ownerDocument;
    var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate();
    var portalNode = portal.current;
    return function() {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, []);
  var _children = manager2 != null && manager2.zIndex ? React7.createElement(Container, {
    zIndex: manager2 == null ? void 0 : manager2.zIndex
  }, children) : children;
  return portal.current ? (0, import_react_dom.createPortal)(React7.createElement(PortalContextProvider, {
    value: portal.current
  }, _children), portal.current) : React7.createElement("span", {
    ref: tempNode
  });
};
var ContainerPortal = function ContainerPortal2(props) {
  var children = props.children, containerRef = props.containerRef, appendToParentPortal = props.appendToParentPortal;
  var containerEl = containerRef.current;
  var host = containerEl != null ? containerEl : isBrowser ? document.body : void 0;
  var portal = React7.useMemo(function() {
    var node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node)
      node.className = PORTAL_CLASSNAME;
    return node;
  }, [containerEl]);
  var forceUpdate = useForceUpdate();
  useSafeLayoutEffect(function() {
    forceUpdate();
  }, []);
  useSafeLayoutEffect(function() {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return function() {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(React7.createElement(PortalContextProvider, {
      value: appendToParentPortal ? portal : null
    }, children), portal);
  }
  return null;
};
function Portal(props) {
  var containerRef = props.containerRef, rest = _objectWithoutPropertiesLoose3(props, _excluded3);
  return containerRef ? React7.createElement(ContainerPortal, _extends5({
    containerRef
  }, rest)) : React7.createElement(DefaultPortal, rest);
}
Portal.defaultProps = {
  appendToParentPortal: true
};
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
if (__DEV__) {
  Portal.displayName = "Portal";
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chakra-ui-transition.esm.js
var React8 = __toModule(require_react());
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var TransitionEasings = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TransitionVariants = {
  scale: {
    enter: {
      scale: 1
    },
    exit: {
      scale: 0.95
    }
  },
  fade: {
    enter: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  },
  pushLeft: {
    enter: {
      x: "100%"
    },
    exit: {
      x: "-30%"
    }
  },
  pushRight: {
    enter: {
      x: "-100%"
    },
    exit: {
      x: "30%"
    }
  },
  pushUp: {
    enter: {
      y: "100%"
    },
    exit: {
      y: "-30%"
    }
  },
  pushDown: {
    enter: {
      y: "-100%"
    },
    exit: {
      y: "30%"
    }
  },
  slideLeft: {
    position: {
      left: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "-100%",
      y: 0
    }
  },
  slideRight: {
    position: {
      right: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "100%",
      y: 0
    }
  },
  slideUp: {
    position: {
      top: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "-100%"
    }
  },
  slideDown: {
    position: {
      bottom: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "100%"
    }
  }
};
function slideTransition(options) {
  var _options$direction;
  var side = (_options$direction = options == null ? void 0 : options.direction) != null ? _options$direction : "right";
  switch (side) {
    case "right":
      return TransitionVariants.slideRight;
    case "left":
      return TransitionVariants.slideLeft;
    case "bottom":
      return TransitionVariants.slideDown;
    case "top":
      return TransitionVariants.slideUp;
    default:
      return TransitionVariants.slideRight;
  }
}
var TransitionDefaults = {
  enter: {
    duration: 0.2,
    ease: TransitionEasings.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TransitionEasings.easeIn
  }
};
var withDelay = {
  enter: function enter(transition, delay) {
    return _extends6({}, transition, {
      delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["enter"]
    });
  },
  exit: function exit(transition, delay) {
    return _extends6({}, transition, {
      delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["exit"]
    });
  }
};
var _excluded$4 = ["in", "unmountOnExit", "animateOpacity", "startingHeight", "endingHeight", "style", "className", "transition", "transitionEnd"];
var isNumeric = function isNumeric2(value) {
  return value != null && parseInt(value.toString(), 10) > 0;
};
var defaultTransitions = {
  exit: {
    height: {
      duration: 0.2,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.3,
      ease: TransitionEasings.ease
    }
  },
  enter: {
    height: {
      duration: 0.3,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.4,
      ease: TransitionEasings.ease
    }
  }
};
var variants$4 = {
  exit: function exit2(_ref) {
    var _transition$exit;
    var animateOpacity = _ref.animateOpacity, startingHeight = _ref.startingHeight, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
    return _extends6({}, animateOpacity && {
      opacity: isNumeric(startingHeight) ? 1 : 0
    }, {
      overflow: "hidden",
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(defaultTransitions.exit, delay)
    });
  },
  enter: function enter2(_ref2) {
    var _transition$enter;
    var animateOpacity = _ref2.animateOpacity, endingHeight = _ref2.endingHeight, transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return _extends6({}, animateOpacity && {
      opacity: 1
    }, {
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(defaultTransitions.enter, delay)
    });
  }
};
var Collapse = React8.forwardRef(function(props, ref) {
  var isOpen = props["in"], unmountOnExit = props.unmountOnExit, _props$animateOpacity = props.animateOpacity, animateOpacity = _props$animateOpacity === void 0 ? true : _props$animateOpacity, _props$startingHeight = props.startingHeight, startingHeight = _props$startingHeight === void 0 ? 0 : _props$startingHeight, _props$endingHeight = props.endingHeight, endingHeight = _props$endingHeight === void 0 ? "auto" : _props$endingHeight, style = props.style, className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, rest = _objectWithoutPropertiesLoose4(props, _excluded$4);
  var _React$useState = React8.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
  React8.useEffect(function() {
    var timeout = setTimeout(function() {
      setMounted(true);
    });
    return function() {
      return clearTimeout(timeout);
    };
  }, []);
  warn({
    condition: Boolean(startingHeight > 0 && unmountOnExit),
    message: "startingHeight and unmountOnExit are mutually exclusive. You can't use them together"
  });
  var hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
  var custom = {
    startingHeight,
    endingHeight,
    animateOpacity,
    transition: !mounted ? {
      enter: {
        duration: 0
      }
    } : transition,
    transitionEnd: (0, import_lodash.default)(transitionEnd, {
      enter: {
        overflow: "initial"
      },
      exit: unmountOnExit ? void 0 : {
        display: hasStartingHeight ? "block" : "none"
      }
    })
  };
  var show = unmountOnExit ? isOpen : true;
  var animate = isOpen || unmountOnExit ? "enter" : "exit";
  return React8.createElement(AnimatePresence, {
    initial: false,
    custom
  }, show && React8.createElement(motion.div, _extends6({
    ref
  }, rest, {
    className: cx("chakra-collapse", className),
    style: _extends6({
      overflow: "hidden",
      display: "block"
    }, style),
    custom,
    variants: variants$4,
    initial: unmountOnExit ? "exit" : false,
    animate,
    exit: "exit"
  })));
});
if (__DEV__) {
  Collapse.displayName = "Collapse";
}
var _excluded$3 = ["unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
var variants$3 = {
  enter: function enter3(_temp) {
    var _transition$enter;
    var _ref = _temp === void 0 ? {} : _temp, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
    return {
      opacity: 1,
      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: function exit3(_temp2) {
    var _transition$exit;
    var _ref2 = _temp2 === void 0 ? {} : _temp2, transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 0,
      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$3
};
var Fade = React8.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose4(props, _excluded$3);
  var animate = isOpen || unmountOnExit ? "enter" : "exit";
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var custom = {
    transition,
    transitionEnd,
    delay
  };
  return React8.createElement(AnimatePresence, {
    custom
  }, show && React8.createElement(motion.div, _extends6({
    ref,
    className: cx("chakra-fade", className),
    custom
  }, fadeConfig, {
    animate
  }, rest)));
});
if (__DEV__) {
  Fade.displayName = "Fade";
}
var _excluded$2 = ["unmountOnExit", "in", "reverse", "initialScale", "className", "transition", "transitionEnd", "delay"];
var variants$2 = {
  exit: function exit4(_ref) {
    var _transition$exit;
    var reverse = _ref.reverse, initialScale = _ref.initialScale, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
    return _extends6({
      opacity: 0
    }, reverse ? {
      scale: initialScale,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    } : {
      transitionEnd: _extends6({
        scale: initialScale
      }, transitionEnd == null ? void 0 : transitionEnd.exit)
    }, {
      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay)
    });
  },
  enter: function enter4(_ref2) {
    var _transition$enter;
    var transitionEnd = _ref2.transitionEnd, transition = _ref2.transition, delay = _ref2.delay;
    return {
      opacity: 1,
      scale: 1,
      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$2
};
var ScaleFade = React8.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, _props$initialScale = props.initialScale, initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale, className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose4(props, _excluded$2);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    initialScale,
    reverse,
    transition,
    transitionEnd,
    delay
  };
  return React8.createElement(AnimatePresence, {
    custom
  }, show && React8.createElement(motion.div, _extends6({
    ref,
    className: cx("chakra-offset-slide", className)
  }, scaleFadeConfig, {
    animate,
    custom
  }, rest)));
});
if (__DEV__) {
  ScaleFade.displayName = "ScaleFade";
}
var _excluded$1 = ["direction", "style", "unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
var defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TransitionEasings.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants$1 = {
  exit: function exit5(_ref) {
    var _transition$exit;
    var direction = _ref.direction, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
    var _slideTransition = slideTransition({
      direction
    }), exitStyles = _slideTransition.exit;
    return _extends6({}, exitStyles, {
      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(defaultTransition.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    });
  },
  enter: function enter5(_ref2) {
    var _transition$enter;
    var direction = _ref2.direction, transitionEnd = _ref2.transitionEnd, transition = _ref2.transition, delay = _ref2.delay;
    var _slideTransition2 = slideTransition({
      direction
    }), enterStyles = _slideTransition2.enter;
    return _extends6({}, enterStyles, {
      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(defaultTransition.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    });
  }
};
var Slide = React8.forwardRef(function(props, ref) {
  var _props$direction = props.direction, direction = _props$direction === void 0 ? "right" : _props$direction, style = props.style, unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose4(props, _excluded$1);
  var transitionStyles = slideTransition({
    direction
  });
  var computedStyle = Object.assign({
    position: "fixed"
  }, transitionStyles.position, style);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    transitionEnd,
    transition,
    direction,
    delay
  };
  return React8.createElement(AnimatePresence, {
    custom
  }, show && React8.createElement(motion.div, _extends6({}, rest, {
    ref,
    initial: "exit",
    className: cx("chakra-slide", className),
    animate,
    exit: "exit",
    custom,
    variants: variants$1,
    style: computedStyle
  })));
});
if (__DEV__) {
  Slide.displayName = "Slide";
}
var _excluded4 = ["unmountOnExit", "in", "reverse", "className", "offsetX", "offsetY", "transition", "transitionEnd", "delay"];
var variants = {
  initial: function initial(_ref) {
    var _transition$exit;
    var offsetX = _ref.offsetX, offsetY = _ref.offsetY, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: function enter6(_ref2) {
    var _transition$enter;
    var transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: function exit6(_ref3) {
    var _transition$exit2;
    var offsetY = _ref3.offsetY, offsetX = _ref3.offsetX, transition = _ref3.transition, transitionEnd = _ref3.transitionEnd, reverse = _ref3.reverse, delay = _ref3.delay;
    var offset = {
      x: offsetX,
      y: offsetY
    };
    return _extends6({
      opacity: 0,
      transition: (_transition$exit2 = transition == null ? void 0 : transition.exit) != null ? _transition$exit2 : withDelay.exit(TransitionDefaults.exit, delay)
    }, reverse ? _extends6({}, offset, {
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    }) : {
      transitionEnd: _extends6({}, offset, transitionEnd == null ? void 0 : transitionEnd.exit)
    });
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants
};
var SlideFade = React8.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, className = props.className, _props$offsetX = props.offsetX, offsetX = _props$offsetX === void 0 ? 0 : _props$offsetX, _props$offsetY = props.offsetY, offsetY = _props$offsetY === void 0 ? 8 : _props$offsetY, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose4(props, _excluded4);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    offsetX,
    offsetY,
    reverse,
    transition,
    transitionEnd,
    delay
  };
  return React8.createElement(AnimatePresence, {
    custom
  }, show && React8.createElement(motion.div, _extends6({
    ref,
    className: cx("chakra-offset-slide", className),
    custom
  }, slideFadeConfig, {
    animate
  }, rest)));
});
if (__DEV__) {
  SlideFade.displayName = "SlideFade";
}

// node_modules/@chakra-ui/modal/dist/chakra-ui-modal.esm.js
var React9 = __toModule(require_react());
var import_react3 = __toModule(require_react());
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
var _excluded$32 = ["preset"];
var transitions = {
  slideInBottom: _extends7({}, slideFadeConfig, {
    custom: {
      offsetY: 16,
      reverse: true
    }
  }),
  slideInRight: _extends7({}, slideFadeConfig, {
    custom: {
      offsetX: 16,
      reverse: true
    }
  }),
  scale: _extends7({}, scaleFadeConfig, {
    custom: {
      initialScale: 0.95,
      reverse: true
    }
  }),
  none: {}
};
var Motion = chakra(motion.section);
var ModalTransition = React9.forwardRef(function(props, ref) {
  var preset = props.preset, rest = _objectWithoutPropertiesLoose5(props, _excluded$32);
  var motionProps = transitions[preset];
  return React9.createElement(Motion, _extends7({
    ref
  }, motionProps, rest));
});
var ModalManager = function() {
  function ModalManager2() {
    this.modals = void 0;
    this.modals = [];
  }
  var _proto = ModalManager2.prototype;
  _proto.add = function add(modal) {
    this.modals.push(modal);
  };
  _proto.remove = function remove(modal) {
    this.modals = this.modals.filter(function(_modal) {
      return _modal !== modal;
    });
  };
  _proto.isTopModal = function isTopModal(modal) {
    var topmostModal = this.modals[this.modals.length - 1];
    return topmostModal === modal;
  };
  return ModalManager2;
}();
var manager = new ModalManager();
function useModalManager(ref, isOpen) {
  (0, import_react3.useEffect)(function() {
    if (isOpen) {
      manager.add(ref);
    }
    return function() {
      manager.remove(ref);
    };
  }, [isOpen, ref]);
}
function useModal(props) {
  var isOpen = props.isOpen, onClose = props.onClose, id = props.id, _props$closeOnOverlay = props.closeOnOverlayClick, closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay, _props$closeOnEsc = props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, _props$useInert = props.useInert, useInert = _props$useInert === void 0 ? true : _props$useInert, onOverlayClickProp = props.onOverlayClick, onEsc = props.onEsc;
  var dialogRef = (0, import_react3.useRef)(null);
  var overlayRef = (0, import_react3.useRef)(null);
  var _useIds = useIds(id, "chakra-modal", "chakra-modal--header", "chakra-modal--body"), dialogId = _useIds[0], headerId = _useIds[1], bodyId = _useIds[2];
  useAriaHidden(dialogRef, isOpen && useInert);
  useModalManager(dialogRef, isOpen);
  var mouseDownTarget = (0, import_react3.useRef)(null);
  var onMouseDown = (0, import_react3.useCallback)(function(event) {
    mouseDownTarget.current = event.target;
  }, []);
  var onKeyDown = (0, import_react3.useCallback)(function(event) {
    if (event.key === "Escape") {
      event.stopPropagation();
      if (closeOnEsc) {
        onClose == null ? void 0 : onClose();
      }
      onEsc == null ? void 0 : onEsc();
    }
  }, [closeOnEsc, onClose, onEsc]);
  var _useState = (0, import_react3.useState)(false), headerMounted = _useState[0], setHeaderMounted = _useState[1];
  var _useState2 = (0, import_react3.useState)(false), bodyMounted = _useState2[0], setBodyMounted = _useState2[1];
  var getDialogProps = (0, import_react3.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends7({
      role: "dialog"
    }, props2, {
      ref: mergeRefs(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers(props2.onClick, function(event) {
        return event.stopPropagation();
      })
    });
  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);
  var onOverlayClick = (0, import_react3.useCallback)(function(event) {
    event.stopPropagation();
    if (mouseDownTarget.current !== event.target)
      return;
    if (!manager.isTopModal(dialogRef))
      return;
    if (closeOnOverlayClick) {
      onClose == null ? void 0 : onClose();
    }
    onOverlayClickProp == null ? void 0 : onOverlayClickProp();
  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);
  var getDialogContainerProps = (0, import_react3.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends7({}, props2, {
      ref: mergeRefs(ref, overlayRef),
      onClick: callAllHandlers(props2.onClick, onOverlayClick),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
    });
  }, [onKeyDown, onMouseDown, onOverlayClick]);
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps
  };
}
function useAriaHidden(ref, shouldHide) {
  var currentElement = ref.current;
  (0, import_react3.useEffect)(function() {
    if (!ref.current || !shouldHide)
      return void 0;
    return hideOthers(ref.current);
  }, [shouldHide, ref, currentElement]);
}
var _excluded$22 = ["className", "children", "containerProps"];
var _excluded2$1 = ["className", "transition"];
var _excluded32 = ["className"];
var _excluded42 = ["className"];
var _excluded5 = ["className"];
var _excluded6 = ["onClick", "className"];
var _createContext$12 = createContext2({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var ModalContextProvider = _createContext$12[0];
var useModalContext = _createContext$12[1];
var Modal = function Modal2(props) {
  var portalProps = props.portalProps, children = props.children, autoFocus = props.autoFocus, trapFocus = props.trapFocus, initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, returnFocusOnClose = props.returnFocusOnClose, blockScrollOnMount = props.blockScrollOnMount, allowPinchZoom = props.allowPinchZoom, preserveScrollBarGap = props.preserveScrollBarGap, motionPreset = props.motionPreset, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
  var styles = useMultiStyleConfig("Modal", props);
  var modal = useModal(props);
  var context = _extends7({}, modal, {
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  });
  return React9.createElement(ModalContextProvider, {
    value: context
  }, React9.createElement(StylesProvider, {
    value: styles
  }, React9.createElement(AnimatePresence, null, context.isOpen && React9.createElement(Portal, portalProps, children))));
};
Modal.defaultProps = {
  lockFocusAcrossFrames: true,
  returnFocusOnClose: true,
  scrollBehavior: "outside",
  trapFocus: true,
  autoFocus: true,
  blockScrollOnMount: true,
  allowPinchZoom: false,
  motionPreset: "scale"
};
if (__DEV__) {
  Modal.displayName = "Modal";
}
var MotionDiv = chakra(motion.div);
var ModalContent = forwardRef(function(props, ref) {
  var className = props.className, children = props.children, rootProps = props.containerProps, rest = _objectWithoutPropertiesLoose5(props, _excluded$22);
  var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps;
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps(rootProps);
  var _className = cx("chakra-modal__content", className);
  var styles = useStyles();
  var dialogStyles = _extends7({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles.dialog);
  var dialogContainerStyles = _extends7({
    display: "flex",
    width: "100vw",
    height: "100vh",
    "@supports(height: -webkit-fill-available)": {
      height: "-webkit-fill-available"
    },
    position: "fixed",
    left: 0,
    top: 0
  }, styles.dialogContainer);
  var _useModalContext2 = useModalContext(), motionPreset = _useModalContext2.motionPreset;
  return React9.createElement(ModalFocusScope, null, React9.createElement(chakra.div, _extends7({}, containerProps, {
    className: "chakra-modal__content-container",
    tabIndex: -1,
    __css: dialogContainerStyles
  }), React9.createElement(ModalTransition, _extends7({
    preset: motionPreset,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  ModalContent.displayName = "ModalContent";
}
function ModalFocusScope(props) {
  var _useModalContext3 = useModalContext(), autoFocus = _useModalContext3.autoFocus, trapFocus = _useModalContext3.trapFocus, dialogRef = _useModalContext3.dialogRef, initialFocusRef = _useModalContext3.initialFocusRef, blockScrollOnMount = _useModalContext3.blockScrollOnMount, allowPinchZoom = _useModalContext3.allowPinchZoom, finalFocusRef = _useModalContext3.finalFocusRef, returnFocusOnClose = _useModalContext3.returnFocusOnClose, preserveScrollBarGap = _useModalContext3.preserveScrollBarGap, lockFocusAcrossFrames = _useModalContext3.lockFocusAcrossFrames;
  var _usePresence = usePresence(), isPresent = _usePresence[0], safeToRemove = _usePresence[1];
  React9.useEffect(function() {
    if (!isPresent && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent, safeToRemove]);
  return React9.createElement(FocusLock, {
    autoFocus,
    isDisabled: !trapFocus,
    initialFocusRef,
    finalFocusRef,
    restoreFocus: returnFocusOnClose,
    contentRef: dialogRef,
    lockFocusAcrossFrames
  }, React9.createElement(Combination_default, {
    removeScrollBar: !preserveScrollBarGap,
    allowPinchZoom,
    enabled: blockScrollOnMount,
    forwardProps: true
  }, props.children));
}
var ModalOverlay = forwardRef(function(props, ref) {
  var className = props.className;
  props.transition;
  var rest = _objectWithoutPropertiesLoose5(props, _excluded2$1);
  var _className = cx("chakra-modal__overlay", className);
  var styles = useStyles();
  var overlayStyle = _extends7({
    pos: "fixed",
    left: "0",
    top: "0",
    w: "100vw",
    h: "100vh"
  }, styles.overlay);
  var _useModalContext4 = useModalContext(), motionPreset = _useModalContext4.motionPreset;
  var motionProps = motionPreset === "none" ? {} : fadeConfig;
  return React9.createElement(MotionDiv, _extends7({}, motionProps, {
    __css: overlayStyle,
    ref,
    className: _className
  }, rest));
});
if (__DEV__) {
  ModalOverlay.displayName = "ModalOverlay";
}
var ModalHeader = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose5(props, _excluded32);
  var _useModalContext5 = useModalContext(), headerId = _useModalContext5.headerId, setHeaderMounted = _useModalContext5.setHeaderMounted;
  React9.useEffect(function() {
    setHeaderMounted(true);
    return function() {
      return setHeaderMounted(false);
    };
  }, [setHeaderMounted]);
  var _className = cx("chakra-modal__header", className);
  var styles = useStyles();
  var headerStyles = _extends7({
    flex: 0
  }, styles.header);
  return React9.createElement(chakra.header, _extends7({
    ref,
    className: _className,
    id: headerId
  }, rest, {
    __css: headerStyles
  }));
});
if (__DEV__) {
  ModalHeader.displayName = "ModalHeader";
}
var ModalBody = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose5(props, _excluded42);
  var _useModalContext6 = useModalContext(), bodyId = _useModalContext6.bodyId, setBodyMounted = _useModalContext6.setBodyMounted;
  React9.useEffect(function() {
    setBodyMounted(true);
    return function() {
      return setBodyMounted(false);
    };
  }, [setBodyMounted]);
  var _className = cx("chakra-modal__body", className);
  var styles = useStyles();
  return React9.createElement(chakra.div, _extends7({
    ref,
    className: _className,
    id: bodyId
  }, rest, {
    __css: styles.body
  }));
});
if (__DEV__) {
  ModalBody.displayName = "ModalBody";
}
var ModalFooter = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose5(props, _excluded5);
  var _className = cx("chakra-modal__footer", className);
  var styles = useStyles();
  var footerStyles = _extends7({
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end"
  }, styles.footer);
  return React9.createElement(chakra.footer, _extends7({
    ref
  }, rest, {
    __css: footerStyles,
    className: _className
  }));
});
if (__DEV__) {
  ModalFooter.displayName = "ModalFooter";
}
var ModalCloseButton = forwardRef(function(props, ref) {
  var onClick = props.onClick, className = props.className, rest = _objectWithoutPropertiesLoose5(props, _excluded6);
  var _useModalContext7 = useModalContext(), onClose = _useModalContext7.onClose;
  var _className = cx("chakra-modal__close-btn", className);
  var styles = useStyles();
  return React9.createElement(CloseButton, _extends7({
    ref,
    __css: styles.closeButton,
    className: _className,
    onClick: callAllHandlers(onClick, function(event) {
      event.stopPropagation();
      onClose();
    })
  }, rest));
});
if (__DEV__) {
  ModalCloseButton.displayName = "ModalCloseButton";
}
var _excluded$12 = ["leastDestructiveRef"];
function AlertDialog(props) {
  var leastDestructiveRef = props.leastDestructiveRef, rest = _objectWithoutPropertiesLoose5(props, _excluded$12);
  return React9.createElement(Modal, _extends7({}, rest, {
    initialFocusRef: leastDestructiveRef
  }));
}
var AlertDialogContent = forwardRef(function(props, ref) {
  return React9.createElement(ModalContent, _extends7({
    ref,
    role: "alertdialog"
  }, props));
});
var _excluded7 = ["isOpen", "onClose", "placement", "children"];
var _excluded22 = ["className", "children"];
var _createContext2 = createContext2();
var DrawerContextProvider = _createContext2[0];
var useDrawerContext = _createContext2[1];
var placementMap = {
  start: {
    ltr: "left",
    rtl: "right"
  },
  end: {
    ltr: "right",
    rtl: "left"
  }
};
function getDrawerPlacement(placement, dir) {
  var _placementMap$placeme, _placementMap$placeme2;
  if (!placement)
    return;
  return (_placementMap$placeme = (_placementMap$placeme2 = placementMap[placement]) == null ? void 0 : _placementMap$placeme2[dir]) != null ? _placementMap$placeme : placement;
}
function Drawer(props) {
  var _theme$components;
  var isOpen = props.isOpen, onClose = props.onClose, _props$placement = props.placement, placementProp = _props$placement === void 0 ? "right" : _props$placement, children = props.children, rest = _objectWithoutPropertiesLoose5(props, _excluded7);
  var theme = useTheme();
  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;
  var placement = getDrawerPlacement(placementProp, theme.direction);
  return React9.createElement(DrawerContextProvider, {
    value: {
      placement
    }
  }, React9.createElement(Modal, _extends7({
    isOpen,
    onClose,
    styleConfig: drawerStyleConfig
  }, rest), children));
}
var StyledSlide = chakra(Slide);
var DrawerContent = forwardRef(function(props, ref) {
  var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose5(props, _excluded22);
  var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps, isOpen = _useModalContext.isOpen;
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps();
  var _className = cx("chakra-modal__content", className);
  var styles = useStyles();
  var dialogStyles = _extends7({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles.dialog);
  var dialogContainerStyles = _extends7({
    display: "flex",
    width: "100vw",
    height: "100vh",
    position: "fixed",
    left: 0,
    top: 0
  }, styles.dialogContainer);
  var _useDrawerContext = useDrawerContext(), placement = _useDrawerContext.placement;
  return React9.createElement(chakra.div, _extends7({}, containerProps, {
    className: "chakra-modal__content-container",
    __css: dialogContainerStyles
  }), React9.createElement(ModalFocusScope, null, React9.createElement(StyledSlide, _extends7({
    direction: placement,
    "in": isOpen,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  DrawerContent.displayName = "DrawerContent";
}
export {
  AlertDialog,
  ModalBody as AlertDialogBody,
  ModalCloseButton as AlertDialogCloseButton,
  AlertDialogContent,
  ModalFooter as AlertDialogFooter,
  ModalHeader as AlertDialogHeader,
  ModalOverlay as AlertDialogOverlay,
  Drawer,
  ModalBody as DrawerBody,
  ModalCloseButton as DrawerCloseButton,
  DrawerContent,
  ModalFooter as DrawerFooter,
  ModalHeader as DrawerHeader,
  ModalOverlay as DrawerOverlay,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalContextProvider,
  ModalFocusScope,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  useAriaHidden,
  useModal,
  useModalContext
};
//# sourceMappingURL=@chakra-ui_modal.js.map
