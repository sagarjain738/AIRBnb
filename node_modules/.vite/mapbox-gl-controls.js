import {
  require_mapbox_gl
} from "./chunk-INYZ2DQE.js";
import {
  __toModule
} from "./chunk-WC6BDPVA.js";

// node_modules/mapbox-gl-controls/lib/icons/pointer.js
var svg = `
<svg viewBox="0 0 24 24" width="22" height="22" xmlns="http://www.w3.org/2000/svg">
    <g fill="none" fill-rule="evenodd">
        <path d="M0 0h24v24H0z"/>
        <path fill="#f44336" d="M12 3l4 8H8z"/>
        <path fill="#9E9E9E" d="M12 21l-4-8h8z"/>
    </g>
</svg>
`;
function pointer_default() {
  return new DOMParser().parseFromString(svg, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/Base/Base.js
var Base = class {
  constructor() {
    this.node = document.createElement("div");
    this.node.classList.add("mapboxgl-ctrl");
    this.node.classList.add("mapboxgl-ctrl-group");
    this.node.classList.add("mapbox-control");
  }
  addButton(button) {
    this.node.appendChild(button.node);
  }
  addClassName(className) {
    this.node.classList.add(className);
  }
  removeClassName(className) {
    this.node.classList.remove(className);
  }
  onAddControl() {
  }
  onRemoveControl() {
  }
  onAdd(map) {
    this.map = map;
    this.onAddControl();
    return this.node;
  }
  onRemove() {
    this.onRemoveControl();
    this.node.parentNode.removeChild(this.node);
    this.map = void 0;
  }
};
var Base_default = Base;

// node_modules/mapbox-gl-controls/lib/Button/Button.js
var Button = class {
  constructor() {
    this.node = document.createElement("button");
    this.node.type = "button";
    this.icon = null;
  }
  setIcon(icon) {
    this.icon = icon;
    this.node.appendChild(icon);
  }
  setText(text) {
    this.node.textContent = text;
  }
  onClick(callback) {
    this.node.addEventListener("click", callback);
  }
  addClassName(className) {
    this.node.classList.add(className);
  }
  removeClassName(className) {
    this.node.classList.remove(className);
  }
};
var Button_default = Button;

// node_modules/mapbox-gl-controls/lib/CompassControl/CompassControl.js
var CompassControl = class extends Base_default {
  constructor(options) {
    var _a;
    super();
    this.button = new Button_default();
    this.instant = (_a = options === null || options === void 0 ? void 0 : options.instant) !== null && _a !== void 0 ? _a : true;
    this.syncRotate = this.syncRotate.bind(this);
  }
  insert() {
    this.addClassName("mapbox-compass");
    if (!this.instant)
      this.node.hidden = true;
    this.button.setIcon(pointer_default());
    this.button.onClick(() => {
      this.map.easeTo({ bearing: 0, pitch: 0 });
    });
    this.addButton(this.button);
  }
  onAddControl() {
    this.insert();
    this.syncRotate();
    this.map.on("rotate", this.syncRotate);
  }
  syncRotate() {
    const angle = this.map.getBearing() * -1;
    if (!this.instant) {
      this.node.hidden = angle === 0;
    }
    this.button.icon.style.transform = `rotate(${angle}deg)`;
  }
};

// node_modules/mapbox-gl-controls/lib/icons/image.js
var svg2 = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="#505050">
  <path d="M0 0h24v24H0V0z" fill="none"/>
  <path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4.86 8.86l-3 3.87L9 13.14 6 17h12l-3.86-5.14z"/>
</svg>
`;
function image_default() {
  return new DOMParser().parseFromString(svg2, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/ImageControl/IImage.js
var IImage = class {
  loadFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      const node = new Image();
      reader.addEventListener("load", () => {
        const imageUrl = reader.result;
        node.onload = () => {
          this.id = file.name;
          this.url = imageUrl;
          this.width = node.width;
          this.height = node.height;
          resolve(this);
        };
        node.onerror = reject;
        node.src = imageUrl;
      }, false);
      reader.readAsDataURL(file);
    });
  }
  loadUrl(url) {
    return new Promise((resolve, reject) => {
      const node = new Image();
      node.onload = () => {
        this.id = url.split("/").pop();
        this.url = url;
        this.width = node.width;
        this.height = node.height;
        resolve(this);
      };
      node.onerror = reject;
      node.src = url;
    });
  }
  setInitialPosition(map) {
    if (!this.width || !this.height)
      throw Error("image is not loaded");
    const padding = 20;
    const mapCanvas = map.getCanvas();
    const canvasWidth = mapCanvas.offsetWidth;
    const canvasHeight = mapCanvas.offsetHeight;
    const maxWidth = canvasWidth - padding * 2;
    const maxHeight = canvasHeight - padding * 2;
    const ratio = Math.min(maxWidth / this.width, maxHeight / this.height);
    const resizeWidth = this.width * ratio;
    const resizeHeight = this.height * ratio;
    const result = [
      [canvasWidth / 2 - resizeWidth / 2, canvasHeight / 2 - resizeHeight / 2],
      [canvasWidth / 2 + resizeWidth / 2, canvasHeight / 2 - resizeHeight / 2],
      [canvasWidth / 2 + resizeWidth / 2, canvasHeight / 2 + resizeHeight / 2],
      [canvasWidth / 2 - resizeWidth / 2, canvasHeight / 2 + resizeHeight / 2]
    ];
    map.setPitch(0);
    this.position = result.map((point) => map.unproject(point));
  }
  get coordinates() {
    return this.position.map((p) => [p.lng, p.lat]);
  }
  get asPolygon() {
    return {
      type: "FeatureCollection",
      features: [
        {
          type: "Feature",
          properties: { id: this.id },
          geometry: { type: "Polygon", coordinates: [[...this.coordinates, this.coordinates[0]]] }
        }
      ]
    };
  }
  get asPoints() {
    return {
      type: "FeatureCollection",
      features: this.coordinates.map((point, i) => ({
        type: "Feature",
        properties: { index: i },
        geometry: { type: "Point", coordinates: point }
      }))
    };
  }
  get imageSource() {
    return {
      id: `${this.id}-raster`,
      source: { type: "image", url: this.url, coordinates: this.coordinates }
    };
  }
  get polygonSource() {
    return {
      id: `${this.id}-polygon`,
      source: { type: "geojson", data: this.asPolygon }
    };
  }
  get cornersSource() {
    return {
      id: `${this.id}-corners`,
      source: { type: "geojson", data: this.asPoints }
    };
  }
  get rasterLayer() {
    return {
      id: `${this.id}-raster`,
      type: "raster",
      source: this.imageSource.id,
      paint: { "raster-fade-duration": 0, "raster-opacity": 0.5 }
    };
  }
  get fillLayer() {
    return {
      id: `${this.id}-fill`,
      type: "fill",
      source: this.polygonSource.id,
      paint: { "fill-opacity": 0 }
    };
  }
  get ratio() {
    return this.width / this.height;
  }
  getOppositePoint(index) {
    if (index === 0)
      return 2;
    if (index === 1)
      return 3;
    if (index === 2)
      return 0;
    if (index === 3)
      return 1;
    throw Error("invalid corner index");
  }
};
var IImage_default = IImage;

// node_modules/mapbox-gl-controls/lib/ImageControl/types.js
var Cursor;
(function(Cursor2) {
  Cursor2["Default"] = "";
  Cursor2["Move"] = "move";
  Cursor2["Grabbing"] = "grabbing";
  Cursor2["NESWResize"] = "nesw-resize";
  Cursor2["NWSEResize"] = "nwse-resize";
})(Cursor || (Cursor = {}));
var EditMode;
(function(EditMode2) {
  EditMode2["Move"] = "move";
  EditMode2["Transform"] = "transform";
})(EditMode || (EditMode = {}));
var Visibility;
(function(Visibility2) {
  Visibility2["Visible"] = "visible";
  Visibility2["None"] = "none";
})(Visibility || (Visibility = {}));

// node_modules/mapbox-gl-controls/lib/ImageControl/moveable.js
var import_mapbox_gl = __toModule(require_mapbox_gl());

// node_modules/mapbox-gl-controls/lib/ImageControl/layers.js
var contourLayer = {
  id: "$contourLayerId",
  type: "line",
  layout: {
    "line-cap": "round",
    "line-join": "round"
  },
  paint: {
    "line-dasharray": [0.2, 2],
    "line-color": "#3d5afe",
    "line-width": 2
  }
};
var shadowLayer = {
  id: "$shadowLayerId",
  type: "fill",
  paint: { "fill-opacity": 0 }
};
var cornersLayer = {
  id: "$cornersLayer",
  type: "circle",
  paint: {
    "circle-radius": 5,
    "circle-color": "#3d5afe",
    "circle-stroke-width": 3,
    "circle-stroke-color": "#fff"
  }
};

// node_modules/mapbox-gl-controls/lib/ImageControl/moveable.js
function moveable(map, image, onUpdate) {
  const mapCanvas = map.getCanvas();
  let startPosition = null;
  map.addLayer(Object.assign(Object.assign({}, contourLayer), { source: image.polygonSource.id }));
  map.addLayer(Object.assign(Object.assign({}, shadowLayer), { source: image.polygonSource.id }));
  function onPointerMove(event) {
    const currentPosition = event.lngLat;
    const deltaLng = startPosition.lng - currentPosition.lng;
    const deltaLat = startPosition.lat - currentPosition.lat;
    onUpdate(image.position.map((p) => new import_mapbox_gl.LngLat(p.lng - deltaLng, p.lat - deltaLat)));
    startPosition = currentPosition;
  }
  function onPointerUp() {
    mapCanvas.style.cursor = Cursor.Move;
    map.off("mousemove", onPointerMove);
    map.setLayoutProperty(contourLayer.id, "visibility", Visibility.Visible);
  }
  function onPointerDown(event) {
    event.preventDefault();
    startPosition = event.lngLat;
    mapCanvas.style.cursor = Cursor.Grabbing;
    map.on("mousemove", onPointerMove);
    map.setLayoutProperty(contourLayer.id, "visibility", Visibility.None);
    document.addEventListener("pointerup", onPointerUp, { once: true });
  }
  function onPointerEnter() {
    mapCanvas.style.cursor = Cursor.Move;
  }
  function onPointerLeave() {
    mapCanvas.style.cursor = "";
  }
  map.on("mouseenter", shadowLayer.id, onPointerEnter);
  map.on("mouseleave", shadowLayer.id, onPointerLeave);
  map.on("mousedown", shadowLayer.id, onPointerDown);
  return () => {
    mapCanvas.style.cursor = "";
    map.off("mousemove", onPointerMove);
    map.off("mouseenter", shadowLayer.id, onPointerEnter);
    map.off("mouseleave", shadowLayer.id, onPointerLeave);
    map.off("mousedown", shadowLayer.id, onPointerDown);
    document.removeEventListener("pointerup", onPointerUp);
    if (map.getLayer(shadowLayer.id))
      map.removeLayer(shadowLayer.id);
    if (map.getLayer(contourLayer.id))
      map.removeLayer(contourLayer.id);
  };
}

// node_modules/mapbox-gl-controls/lib/ImageControl/resizeable.js
var import_mapbox_gl2 = __toModule(require_mapbox_gl());
function getClosestPoint(a, b, p) {
  const u = [p[0] - a[0], p[1] - a[1]];
  const v = [b[0] - a[0], b[1] - a[1]];
  const v2 = Math.pow(v[0], 2) + Math.pow(v[1], 2);
  const vu = v[0] * u[0] + v[1] * u[1];
  const t = vu / v2;
  return [a[0] + v[0] * t, a[1] + v[1] * t];
}
function resizeable(map, image, onUpdate) {
  const mapCanvas = map.getCanvas();
  let currentIndex;
  map.addLayer(Object.assign(Object.assign({}, contourLayer), { source: image.polygonSource.id }));
  map.addLayer(Object.assign(Object.assign({}, cornersLayer), { source: image.cornersSource.id }));
  function onPointerMove(event) {
    const pointA = map.project(image.position[currentIndex]);
    const pointB = map.project(image.position[image.getOppositePoint(currentIndex)]);
    const pointP = map.project(event.lngLat);
    const closestPoint = getClosestPoint([pointA.x, pointA.y], [pointB.x, pointB.y], [pointP.x, pointP.y]);
    const closestLngLat = map.unproject(closestPoint);
    const scaledPosition = image.position;
    scaledPosition[currentIndex] = new import_mapbox_gl2.LngLat(closestLngLat.lng, closestLngLat.lat);
    setResizeCursor(currentIndex);
    if (currentIndex === 0) {
      scaledPosition[1] = new import_mapbox_gl2.LngLat(scaledPosition[1].lng, closestLngLat.lat);
      scaledPosition[3] = new import_mapbox_gl2.LngLat(closestLngLat.lng, scaledPosition[3].lat);
    } else if (currentIndex === 1) {
      scaledPosition[0] = new import_mapbox_gl2.LngLat(scaledPosition[0].lng, closestLngLat.lat);
      scaledPosition[2] = new import_mapbox_gl2.LngLat(closestLngLat.lng, scaledPosition[2].lat);
    } else if (currentIndex === 2) {
      scaledPosition[3] = new import_mapbox_gl2.LngLat(scaledPosition[3].lng, closestLngLat.lat);
      scaledPosition[1] = new import_mapbox_gl2.LngLat(closestLngLat.lng, scaledPosition[1].lat);
    } else if (currentIndex === 3) {
      scaledPosition[2] = new import_mapbox_gl2.LngLat(scaledPosition[2].lng, closestLngLat.lat);
      scaledPosition[0] = new import_mapbox_gl2.LngLat(closestLngLat.lng, scaledPosition[0].lat);
    }
    onUpdate(scaledPosition);
  }
  function onPointerUp() {
    currentIndex = null;
    mapCanvas.style.cursor = "";
    map.off("mousemove", onPointerMove);
    map.setLayoutProperty(cornersLayer.id, "visibility", Visibility.Visible);
    map.setLayoutProperty(contourLayer.id, "visibility", Visibility.Visible);
  }
  function onPointerDown(event) {
    event.preventDefault();
    currentIndex = event.features[0].properties.index;
    map.on("mousemove", onPointerMove);
    map.setLayoutProperty(cornersLayer.id, "visibility", Visibility.None);
    map.setLayoutProperty(contourLayer.id, "visibility", Visibility.None);
    document.addEventListener("pointerup", onPointerUp, { once: true });
  }
  function onPointerEnter(event) {
    setResizeCursor(event.features[0].properties.index);
  }
  function onPointerLeave() {
    mapCanvas.style.cursor = "";
  }
  function setResizeCursor(index) {
    mapCanvas.style.cursor = [1, 3].includes(index) ? Cursor.NESWResize : Cursor.NWSEResize;
  }
  map.on("mouseenter", cornersLayer.id, onPointerEnter);
  map.on("mouseleave", cornersLayer.id, onPointerLeave);
  map.on("mousedown", cornersLayer.id, onPointerDown);
  return () => {
    map.off("mousemove", onPointerMove);
    map.off("mouseenter", cornersLayer.id, onPointerEnter);
    map.off("mouseleave", cornersLayer.id, onPointerLeave);
    map.off("mousedown", cornersLayer.id, onPointerDown);
    document.removeEventListener("pointerup", onPointerUp);
    if (map.getLayer(cornersLayer.id))
      map.removeLayer(cornersLayer.id);
    if (map.getLayer(contourLayer.id))
      map.removeLayer(contourLayer.id);
  };
}

// node_modules/mapbox-gl-controls/lib/ImageControl/ImageControl.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ImageControl = class extends Base_default {
  constructor() {
    super();
    this.button = new Button_default();
    this.fileInput = document.createElement("input");
    this.fileInput.type = "file";
    this.fileInput.accept = ".jpg, .jpeg, .png";
    this.fileInput.multiple = true;
    this.images = [];
    this.editMode = null;
    this.selectedImage = null;
    this.onMapClick = this.onMapClick.bind(this);
    this.onFileInputChange = this.onFileInputChange.bind(this);
    this.keyDownListener = this.keyDownListener.bind(this);
  }
  insert() {
    this.addClassName("mapbox-control-image");
    this.button.setIcon(image_default());
    this.addButton(this.button);
    this.node.appendChild(this.fileInput);
    this.button.onClick(() => this.fileInput.click());
    this.fileInput.addEventListener("change", this.onFileInputChange);
  }
  onFileInputChange() {
    Array.from(this.fileInput.files).forEach((file, index) => __awaiter(this, void 0, void 0, function* () {
      const image = yield this.addImage(file);
      if (this.fileInput.files.length - 1 === index)
        this.selectImage(image.id);
    }));
  }
  addImage(data, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const image = new IImage_default();
      if (typeof data === "string") {
        yield image.loadUrl(data);
      } else if (data) {
        yield image.loadFile(data);
      } else {
        throw Error("file or url is required");
      }
      if (options.position) {
        image.position = options.position;
      } else {
        image.setInitialPosition(this.map);
      }
      this.images.push(image);
      this.drawImage(image);
      this.map.fire("image.add", image);
      return image;
    });
  }
  drawImage(image) {
    this.map.addSource(image.imageSource.id, image.imageSource.source);
    this.map.addSource(image.polygonSource.id, image.polygonSource.source);
    this.map.addSource(image.cornersSource.id, image.cornersSource.source);
    this.map.addLayer(image.rasterLayer);
    this.map.addLayer(image.fillLayer);
  }
  redraw() {
    this.images.forEach((image) => this.drawImage(image));
    if (this.movingOff) {
      this.movingOff();
    }
    if (this.transformOff) {
      this.transformOff();
    }
  }
  onMapClick(event) {
    const imageFillLayersId = this.images.map((i) => i.fillLayer.id);
    const features = this.map.queryRenderedFeatures(event.point, { layers: imageFillLayersId });
    if (features.length) {
      this.selectImage(features[0].properties.id);
    } else {
      this.deselectImage();
    }
  }
  movingOn() {
    this.movingOff = moveable(this.map, this.selectedImage, (position) => {
      this.updateImageSource(position);
    });
  }
  transformOn() {
    this.transformOff = resizeable(this.map, this.selectedImage, (position) => {
      this.updateImageSource(position);
    });
  }
  selectImage(id) {
    if (this.selectedImage && this.selectedImage.id !== id)
      this.deselectImage();
    this.selectedImage = this.images.find((i) => i.id === id);
    if (!this.editMode) {
      this.editMode = EditMode.Move;
      this.movingOn();
    } else if (this.editMode === EditMode.Move) {
      this.editMode = EditMode.Transform;
      this.movingOff();
      this.transformOn();
    }
    this.map.fire("image.select", this.selectedImage);
    document.addEventListener("keydown", this.keyDownListener);
  }
  deselectImage() {
    if (!this.selectedImage)
      return;
    if (this.editMode === EditMode.Move) {
      this.movingOff();
    } else if (this.editMode === EditMode.Transform) {
      this.transformOff();
    }
    this.map.fire("image.deselect", this.selectedImage);
    this.selectedImage = null;
    this.editMode = null;
    document.removeEventListener("keydown", this.keyDownListener);
  }
  updateImageSource(position) {
    const selectedImage = this.selectedImage;
    selectedImage.position = position;
    this.map.getSource(selectedImage.imageSource.id).setCoordinates(selectedImage.coordinates);
    this.map.getSource(selectedImage.polygonSource.id).setData(selectedImage.asPolygon);
    this.map.getSource(selectedImage.cornersSource.id).setData(selectedImage.asPoints);
    this.map.fire("image.update", this.selectedImage);
  }
  keyDownListener(event) {
    if (event.key === "Escape") {
      this.deselectImage();
    }
  }
  onAddControl() {
    if (this.map.isStyleLoaded()) {
      this.insert();
    } else {
      this.map.once("style.load", () => this.insert());
    }
    this.map.on("style.load", () => this.redraw());
    this.mapContainer = this.map.getContainer();
    this.map.on("click", this.onMapClick);
  }
};

// node_modules/mapbox-gl-controls/lib/icons/left.js
var svg3 = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#505050">
    <path d="M14 7l-5 5 5 5V7z"/>
    <path fill="none" d="M24 0v24H0V0h24z"/>
</svg>
`;
function left_default() {
  return new DOMParser().parseFromString(svg3, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/icons/right.js
var svg4 = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#505050">
    <path d="M10 17l5-5-5-5v10z"/>
    <path fill="none" d="M0 24V0h24v24H0z"/>
</svg>
`;
function right_default() {
  return new DOMParser().parseFromString(svg4, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/InspectControl/popupTemplate.js
var Direction;
(function(Direction2) {
  Direction2["Next"] = "next";
  Direction2["Prev"] = "prev";
})(Direction || (Direction = {}));
function getData(feature) {
  var _a;
  const layerData = [
    "layer",
    { key: "id", value: feature.layer.id },
    { key: "type", value: feature.layer.type },
    { key: "source", value: feature.layer.source },
    { key: "source-layer", value: (_a = feature.layer["source-layer"]) !== null && _a !== void 0 ? _a : "\u2014" }
  ];
  const featureData = ["properties"];
  if (feature.id) {
    featureData.push({ key: "$id", value: feature.id });
  }
  Object.entries(feature.properties).forEach(([key, value]) => {
    featureData.push({ key, value });
  });
  if (featureData.length === 1) {
    featureData.pop();
  }
  return [...layerData, ...featureData];
}
function popupTemplate(features) {
  let current = 0;
  const root = document.createElement("div");
  root.classList.add("mapbox-control-inspect-popup");
  const content = document.createElement("div");
  content.classList.add("mapbox-control-inspect-content");
  const templatePrev = () => {
    const button = document.createElement("div");
    button.setAttribute("type", "button");
    button.classList.add("mapbox-control-inspect-prev");
    button.appendChild(left_default());
    button.addEventListener("click", () => goTo(Direction.Prev));
    return button;
  };
  const templateNext = () => {
    const button = document.createElement("div");
    button.setAttribute("type", "button");
    button.classList.add("mapbox-control-inspect-next");
    button.appendChild(right_default());
    button.addEventListener("click", () => goTo(Direction.Next));
    return button;
  };
  const templateTitle = () => {
    const title = document.createElement("div");
    title.classList.add("mapbox-control-inspect-current");
    title.textContent = `${current + 1} / ${features.length}`;
    return title;
  };
  const templateHeader = () => {
    const header = document.createElement("div");
    header.classList.add("mapbox-control-inspect-header");
    header.appendChild(templatePrev());
    header.appendChild(templateTitle());
    header.appendChild(templateNext());
    return header;
  };
  const templateFeature = (feature) => {
    const table = document.createElement("table");
    table.classList.add("mapbox-control-inspect-grid");
    const data = getData(feature);
    data.forEach((record) => {
      const row = document.createElement("tr");
      if (typeof record === "string") {
        const caption = document.createElement("th");
        caption.classList.add("mapbox-control-inspect-caption");
        caption.colSpan = 2;
        caption.textContent = record;
        row.appendChild(caption);
        table.append(row);
        return;
      }
      const key = document.createElement("th");
      const value = document.createElement("td");
      key.classList.add("mapbox-control-inspect-key");
      value.classList.add("mapbox-control-inspect-value");
      key.textContent = record.key;
      value.textContent = String(record.value);
      row.appendChild(key);
      row.appendChild(value);
      table.append(row);
    });
    return table;
  };
  function goTo(dir) {
    if (dir === Direction.Prev) {
      current = current !== 0 ? current - 1 : features.length - 1;
    } else if (dir === Direction.Next) {
      current = current !== features.length - 1 ? current + 1 : 0;
    }
    content.innerHTML = "";
    content.appendChild(templateHeader());
    content.appendChild(templateFeature(features[current]));
  }
  root.appendChild(content);
  if (!features.length) {
    content.textContent = "No features";
  } else {
    if (features.length > 1) {
      content.appendChild(templateHeader());
    }
    content.appendChild(templateFeature(features[current]));
  }
  return root;
}

// node_modules/mapbox-gl-controls/lib/icons/inspect.js
var svg5 = `
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="#505050">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z"/>
</svg>
`;
function inspect_default() {
  return new DOMParser().parseFromString(svg5, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/InspectControl/InspectControl.js
var InspectControl = class extends Base_default {
  constructor(options) {
    super();
    this.console = options === null || options === void 0 ? void 0 : options.console;
    this.popupNode = null;
    this.lngLat = null;
    this.isInspecting = false;
    this.button = new Button_default();
  }
  insert() {
    this.addClassName("mapbox-control-inspect");
    this.button.setIcon(inspect_default());
    this.button.onClick(() => {
      if (this.isInspecting) {
        this.inspectingOff();
      } else {
        this.inspectingOn();
      }
    });
    this.addButton(this.button);
    this.mapClickListener = this.mapClickListener.bind(this);
    this.updatePosition = this.updatePosition.bind(this);
  }
  inspectingOn() {
    this.isInspecting = true;
    this.button.addClassName("-active");
    this.map.on("click", this.mapClickListener);
    this.map.on("move", this.updatePosition);
    this.map.getCanvas().style.cursor = "pointer";
  }
  inspectingOff() {
    this.isInspecting = false;
    this.button.removeClassName("-active");
    this.map.off("click", this.mapClickListener);
    this.map.off("move", this.updatePosition);
    this.map.getCanvas().style.cursor = "";
    this.removePopup();
  }
  getFeatures(event) {
    const selectThreshold = 3;
    const queryBox = [
      [event.point.x - selectThreshold, event.point.y + selectThreshold],
      [event.point.x + selectThreshold, event.point.y - selectThreshold]
    ];
    return this.map.queryRenderedFeatures(queryBox);
  }
  addPopup(features) {
    this.popupNode = popupTemplate(features);
    this.mapContainer.appendChild(this.popupNode);
    this.updatePosition();
    if (this.console) {
      console.log(features);
    }
  }
  removePopup() {
    if (!this.popupNode)
      return;
    this.mapContainer.removeChild(this.popupNode);
    this.popupNode = null;
  }
  updatePosition() {
    if (!this.lngLat)
      return;
    const canvasRect = this.mapCanvas.getBoundingClientRect();
    const pos = this.map.project(this.lngLat);
    this.popupNode.style.left = `${pos.x - canvasRect.left}px`;
    this.popupNode.style.top = `${pos.y - canvasRect.top}px`;
  }
  mapClickListener(event) {
    this.lngLat = event.lngLat;
    const features = this.getFeatures(event);
    this.removePopup();
    this.addPopup(features);
  }
  onAddControl() {
    this.mapContainer = this.map.getContainer();
    this.mapCanvas = this.map.getCanvas();
    this.insert();
  }
  onRemoveControl() {
    this.inspectingOff();
  }
};

// node_modules/mapbox-gl-controls/lib/LanguageControl/getLanguageField.js
function getLanguageField(lang) {
  if (lang === "mul") {
    return "name";
  }
  return `name_${lang}`;
}

// node_modules/mapbox-gl-controls/lib/LanguageControl/localizeTextField.js
function localizeTextField(field, lang) {
  if (typeof field === "string") {
    return field.replace(/{name.*?}/, `{${lang}}`);
  }
  const str = JSON.stringify(field);
  if (Array.isArray(field)) {
    return JSON.parse(str.replace(/"coalesce",\["get","name.*?"]/g, `"coalesce",["get","${lang}"]`));
  }
  return JSON.parse(str.replace(/{name.*?}/g, `{${lang}}`));
}

// node_modules/mapbox-gl-controls/lib/LanguageControl/LanguageControl.js
var SUPPORTED_LANGUAGES = ["en", "es", "fr", "de", "ru", "zh", "pt", "ar", "ja", "ko", "mul"];
var LanguageControl = class extends Base_default {
  constructor(options) {
    var _a, _b, _c;
    super();
    this.supportedLanguages = (_a = options === null || options === void 0 ? void 0 : options.supportedLanguages) !== null && _a !== void 0 ? _a : SUPPORTED_LANGUAGES;
    this.language = options === null || options === void 0 ? void 0 : options.language;
    this.getLanguageField = (_b = options === null || options === void 0 ? void 0 : options.getLanguageField) !== null && _b !== void 0 ? _b : getLanguageField;
    this.excludedLayerIds = (_c = options === null || options === void 0 ? void 0 : options.excludedLayerIds) !== null && _c !== void 0 ? _c : [];
    this.styleChangeListener = this.styleChangeListener.bind(this);
  }
  onAddControl() {
    this.map.on("styledata", this.styleChangeListener);
  }
  onRemoveControl() {
    this.map.off("styledata", this.styleChangeListener);
  }
  styleChangeListener() {
    this.map.off("styledata", this.styleChangeListener);
    this.setLanguage(this.language);
  }
  setLanguage(lang = this.browserLanguage()) {
    const language = this.supportedLanguages.indexOf(lang) < 0 ? "mul" : lang;
    const style = this.map.getStyle();
    const languageField = this.getLanguageField(language);
    const layers = style.layers.map((layer) => {
      if (layer.type !== "symbol")
        return layer;
      if (!layer.layout || !layer.layout["text-field"])
        return layer;
      if (this.excludedLayerIds.indexOf(layer.id) !== -1)
        return layer;
      const textField = layer.layout["text-field"];
      const textFieldLocalized = localizeTextField(textField, languageField);
      return Object.assign(Object.assign({}, layer), { layout: Object.assign(Object.assign({}, layer.layout), { "text-field": textFieldLocalized }) });
    });
    this.map.setStyle(Object.assign(Object.assign({}, style), { layers }));
  }
  browserLanguage() {
    const language = navigator.languages ? navigator.languages[0] : navigator.language;
    const parts = language.split("-");
    const languageCode = parts.length > 1 ? parts[0] : language;
    if (this.supportedLanguages.indexOf(languageCode) > -1)
      return languageCode;
    return "mul";
  }
};

// node_modules/mapbox-gl-controls/lib/RulerControl/RulerControl.js
var import_mapbox_gl3 = __toModule(require_mapbox_gl());

// node_modules/@turf/helpers/dist/es/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: earthRadius / 111325,
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};
var unitsFactors = {
  centimeters: 100,
  centimetres: 100,
  degrees: 1 / 111325,
  feet: 3.28084,
  inches: 39.37,
  kilometers: 1 / 1e3,
  kilometres: 1 / 1e3,
  meters: 1,
  metres: 1,
  miles: 1 / 1609.344,
  millimeters: 1e3,
  millimetres: 1e3,
  nauticalmiles: 1 / 1852,
  radians: 1 / earthRadius,
  yards: 1.0936133
};
function radiansToLength(radians, units) {
  if (units === void 0) {
    units = "kilometers";
  }
  var factor = factors[units];
  if (!factor) {
    throw new Error(units + " units is invalid");
  }
  return radians * factor;
}
function degreesToRadians(degrees) {
  var radians = degrees % 360;
  return radians * Math.PI / 180;
}

// node_modules/@turf/invariant/dist/es/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return coord.geometry.coordinates;
    }
    if (coord.type === "Point") {
      return coord.coordinates;
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return coord;
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}

// node_modules/@turf/distance/dist/es/index.js
function distance(from, to, options) {
  if (options === void 0) {
    options = {};
  }
  var coordinates1 = getCoord(from);
  var coordinates2 = getCoord(to);
  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);
  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);
  var lat1 = degreesToRadians(coordinates1[1]);
  var lat2 = degreesToRadians(coordinates2[1]);
  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);
  return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);
}
var es_default = distance;

// node_modules/mapbox-gl-controls/lib/RulerControl/labelFormat.js
function labelFormat(number) {
  if (number < 1) {
    return `${(number * 1e3).toFixed()} m`;
  }
  return `${number.toFixed(2)} km`;
}

// node_modules/mapbox-gl-controls/lib/RulerControl/lineStringFeature.js
function lineStringFeature(coordinates) {
  return {
    type: "Feature",
    properties: {},
    geometry: {
      type: "LineString",
      coordinates
    }
  };
}

// node_modules/mapbox-gl-controls/lib/RulerControl/pointFeatureCollection.js
function pointFeatureCollection(coordinates = [], labels = []) {
  return {
    type: "FeatureCollection",
    features: coordinates.map((c, i) => ({
      type: "Feature",
      properties: {
        text: labels[i]
      },
      geometry: {
        type: "Point",
        coordinates: c
      }
    }))
  };
}

// node_modules/mapbox-gl-controls/lib/icons/ruler.js
var svg6 = `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" width="22" height="22" fill="#505050">
    <rect fill="none" height="24" width="24"/>
    <path d="M20,6H4C2.9,6,2,6.9,2,8v8c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V8C22,6.9,21.1,6,20,6z M20,16H4V8h3v3c0,0.55,0.45,1,1,1h0 c0.55,0,1-0.45,1-1V8h2v3c0,0.55,0.45,1,1,1h0c0.55,0,1-0.45,1-1V8h2v3c0,0.55,0.45,1,1,1h0c0.55,0,1-0.45,1-1V8h3V16z"/>
</svg>
`;
function ruler_default() {
  return new DOMParser().parseFromString(svg6, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/RulerControl/RulerControl.js
var LAYER_LINE = "controls-layer-line";
var LAYER_SYMBOL = "controls-layer-symbol";
var SOURCE_LINE = "controls-source-line";
var SOURCE_SYMBOL = "controls-source-symbol";
var MAIN_COLOR = "#263238";
var HALO_COLOR = "#fff";
var RulerControl = class extends Base_default {
  constructor(options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    super();
    this.isMeasuring = false;
    this.markers = [];
    this.coordinates = [];
    this.labels = [];
    this.units = (_a = options === null || options === void 0 ? void 0 : options.units) !== null && _a !== void 0 ? _a : "kilometers";
    this.font = (_b = options === null || options === void 0 ? void 0 : options.font) !== null && _b !== void 0 ? _b : ["Roboto Medium"];
    this.fontSize = (_c = options === null || options === void 0 ? void 0 : options.fontSize) !== null && _c !== void 0 ? _c : 12;
    this.fontHalo = (_d = options === null || options === void 0 ? void 0 : options.fontHalo) !== null && _d !== void 0 ? _d : 1;
    this.textVariableAnchor = (options === null || options === void 0 ? void 0 : options.textVariableAnchor) || ["top"];
    this.textAllowOverlap = (options === null || options === void 0 ? void 0 : options.textAllowOverlap) || false;
    this.markerNodeSize = `${(_e = options === null || options === void 0 ? void 0 : options.markerNodeSize) !== null && _e !== void 0 ? _e : 12}px`;
    this.markerNodeBorderWidth = `${(_f = options === null || options === void 0 ? void 0 : options.markerNodeBorderWidth) !== null && _f !== void 0 ? _f : 2}px`;
    this.labelFormat = (_g = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _g !== void 0 ? _g : labelFormat;
    this.mainColor = (_h = options === null || options === void 0 ? void 0 : options.mainColor) !== null && _h !== void 0 ? _h : MAIN_COLOR;
    this.secondaryColor = (_j = options === null || options === void 0 ? void 0 : options.secondaryColor) !== null && _j !== void 0 ? _j : HALO_COLOR;
    this.button = new Button_default();
    this.mapClickListener = this.mapClickListener.bind(this);
    this.styleLoadListener = this.styleLoadListener.bind(this);
  }
  insert() {
    this.addClassName("mapbox-control-ruler");
    this.button.setIcon(ruler_default());
    this.button.onClick(() => {
      if (this.isMeasuring) {
        this.measuringOff();
      } else {
        this.measuringOn();
      }
    });
    this.addButton(this.button);
  }
  draw() {
    this.map.addSource(SOURCE_LINE, {
      type: "geojson",
      data: lineStringFeature(this.coordinates)
    });
    this.map.addSource(SOURCE_SYMBOL, {
      type: "geojson",
      data: pointFeatureCollection(this.coordinates, this.labels)
    });
    this.map.addLayer({
      id: LAYER_LINE,
      type: "line",
      source: SOURCE_LINE,
      paint: {
        "line-color": this.mainColor,
        "line-width": 2
      }
    });
    this.map.addLayer({
      id: LAYER_SYMBOL,
      type: "symbol",
      source: SOURCE_SYMBOL,
      layout: {
        "text-field": "{text}",
        "text-font": this.font,
        "text-anchor": "top",
        "text-size": this.fontSize,
        "text-offset": [0, 0.8]
      },
      paint: {
        "text-color": this.mainColor,
        "text-halo-color": this.secondaryColor,
        "text-halo-width": this.fontHalo
      }
    });
  }
  measuringOn() {
    this.isMeasuring = true;
    this.markers = [];
    this.coordinates = [];
    this.labels = [];
    this.map.getCanvas().style.cursor = "crosshair";
    this.button.addClassName("-active");
    this.draw();
    this.map.on("click", this.mapClickListener);
    this.map.on("style.load", this.styleLoadListener);
    this.map.fire("ruler.on");
  }
  measuringOff() {
    this.isMeasuring = false;
    this.map.getCanvas().style.cursor = "";
    this.button.removeClassName("-active");
    this.map.removeLayer(LAYER_LINE);
    this.map.removeLayer(LAYER_SYMBOL);
    this.map.removeSource(SOURCE_LINE);
    this.map.removeSource(SOURCE_SYMBOL);
    this.markers.forEach((m) => m.remove());
    this.map.off("click", this.mapClickListener);
    this.map.off("style.load", this.styleLoadListener);
    this.map.fire("ruler.off");
  }
  mapClickListener(event) {
    const markerNode = this.getMarkerNode();
    const marker = new import_mapbox_gl3.default.Marker({ element: markerNode, draggable: true }).setLngLat(event.lngLat).addTo(this.map);
    const newCoordinate = [event.lngLat.lng, event.lngLat.lat];
    this.coordinates.push(newCoordinate);
    this.updateLabels();
    this.updateSource();
    this.markers.push(marker);
    this.map.fire("ruler.change", { coordinates: this.coordinates });
    marker.on("drag", () => {
      const index = this.markers.indexOf(marker);
      const lngLat = marker.getLngLat();
      this.coordinates[index] = [lngLat.lng, lngLat.lat];
      this.updateLabels();
      this.updateSource();
    });
    marker.on("dragend", () => {
      this.map.fire("ruler.change", { coordinates: this.coordinates });
    });
  }
  updateSource() {
    const lineSource = this.map.getSource(SOURCE_LINE);
    const symbolSource = this.map.getSource(SOURCE_SYMBOL);
    lineSource.setData(lineStringFeature(this.coordinates));
    symbolSource.setData(pointFeatureCollection(this.coordinates, this.labels));
  }
  updateLabels() {
    const { coordinates, units, labelFormat: labelFormat2 } = this;
    let sum = 0;
    this.labels = coordinates.map((coordinate, index) => {
      if (index === 0)
        return labelFormat2(0);
      sum += es_default(coordinates[index - 1], coordinates[index], { units });
      return labelFormat2(sum);
    });
  }
  getMarkerNode() {
    const node = document.createElement("div");
    node.style.width = "12px";
    node.style.height = "12px";
    node.style.borderRadius = "50%";
    node.style.background = this.secondaryColor;
    node.style.boxSizing = "border-box";
    node.style.border = `2px solid ${this.mainColor}`;
    return node;
  }
  styleLoadListener() {
    this.draw();
  }
  onAddControl() {
    this.insert();
  }
  onRemoveControl() {
    if (this.isMeasuring)
      this.measuringOff();
    this.map.off("click", this.mapClickListener);
  }
};

// node_modules/mapbox-gl-controls/lib/StylesControl/StylesControl.js
var StylesControl = class extends Base_default {
  constructor(options) {
    var _a;
    super();
    this.styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : this.defaultOptions;
    this.onChange = options === null || options === void 0 ? void 0 : options.onChange;
    this.buttons = [];
  }
  insert() {
    this.addClassName("mapbox-control-styles");
    this.styles.forEach((style) => {
      const button = new Button_default();
      button.setText(style.label);
      button.onClick(() => {
        if (button.node.classList.contains("-active"))
          return;
        this.map.setStyle(style.styleUrl);
        if (this.onChange)
          this.onChange(style);
      });
      this.buttons.push(button);
      this.addButton(button);
    });
    this.map.on("styledata", () => {
      this.buttons.forEach((button) => {
        button.removeClassName("-active");
      });
      const styleNames = this.styles.map((style) => style.styleName);
      const currentStyleIndex = styleNames.indexOf(this.map.getStyle().name);
      if (currentStyleIndex !== -1) {
        const currentButton = this.buttons[currentStyleIndex];
        currentButton.addClassName("-active");
      }
    });
  }
  get defaultOptions() {
    return [
      {
        label: "Streets",
        styleName: "Mapbox Streets",
        styleUrl: "mapbox://styles/mapbox/streets-v11"
      },
      {
        label: "Satellite",
        styleName: "Mapbox Satellite Streets",
        styleUrl: "mapbox://sprites/mapbox/satellite-streets-v11"
      }
    ];
  }
  onAddControl() {
    this.insert();
  }
};

// node_modules/mapbox-gl-controls/lib/TooltipControl/TooltipControl.js
var TooltipControl = class extends Base_default {
  constructor(options) {
    super();
    if (typeof (options === null || options === void 0 ? void 0 : options.getContent) !== "function") {
      throw Error("getContent function must be defined");
    }
    this.layer = options === null || options === void 0 ? void 0 : options.layer;
    this.getContent = options === null || options === void 0 ? void 0 : options.getContent;
    this.container = document.createElement("div");
    this.eventShow = this.layer ? "mouseenter" : "mouseover";
    this.eventHide = this.layer ? "mouseleave" : "mouseout";
    this.node = document.createElement("div");
    this.node.classList.add("mapbox-control-tooltip");
    this.lngLat = null;
    this.cursorStyle = "";
    this.show = this.show.bind(this);
    this.move = this.move.bind(this);
    this.hide = this.hide.bind(this);
    this.updatePosition = this.updatePosition.bind(this);
  }
  show() {
    this.mapContainer.appendChild(this.node);
    this.cursorStyle = this.mapCanvas.style.cursor;
    this.mapCanvas.style.cursor = "pointer";
    this.map.on("move", this.updatePosition);
  }
  hide() {
    this.node.innerHTML = "";
    this.mapContainer.removeChild(this.node);
    this.mapCanvas.style.cursor = this.cursorStyle;
    this.map.off("move", this.updatePosition);
  }
  move(event) {
    this.node.innerHTML = this.getContent(event);
    this.lngLat = event.lngLat;
    this.updatePosition();
  }
  updatePosition() {
    if (!this.lngLat)
      return;
    const pos = this.map.project(this.lngLat);
    this.node.style.left = `${pos.x}px`;
    this.node.style.top = `${pos.y}px`;
  }
  onAddControl() {
    this.mapContainer = this.map.getContainer();
    this.mapCanvas = this.map.getCanvas();
    if (this.layer) {
      this.map.on(this.eventShow, this.layer, this.show);
      this.map.on("mousemove", this.layer, this.move);
      this.map.on(this.eventHide, this.layer, this.hide);
    } else {
      this.map.on(this.eventShow, this.show);
      this.map.on("mousemove", this.move);
      this.map.on(this.eventHide, this.hide);
    }
  }
  onRemoveControl() {
    if (this.layer) {
      this.map.off(this.eventShow, this.layer, this.show);
      this.map.off("mousemove", this.layer, this.move);
      this.map.off(this.eventHide, this.layer, this.hide);
    } else {
      this.map.off(this.eventShow, this.show);
      this.map.off("mousemove", this.move);
      this.map.off(this.eventHide, this.hide);
    }
    this.hide();
  }
};

// node_modules/mapbox-gl-controls/lib/icons/plus.js
var svg7 = `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" fill="#505050" width="20" height="20">
    <rect fill="none" height="24" width="24"/>
    <path d="M18,13h-5v5c0,0.55-0.45,1-1,1l0,0c-0.55,0-1-0.45-1-1v-5H6c-0.55,0-1-0.45-1-1l0,0c0-0.55,0.45-1,1-1h5V6 c0-0.55,0.45-1,1-1l0,0c0.55,0,1,0.45,1,1v5h5c0.55,0,1,0.45,1,1l0,0C19,12.55,18.55,13,18,13z"/>
</svg>
`;
function plus_default() {
  return new DOMParser().parseFromString(svg7, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/icons/minus.js
var svg8 = `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" fill="#505050" width="20" height="20">
    <rect fill="none" height="24" width="24"/>
    <path d="M18,13H6c-0.55,0-1-0.45-1-1l0,0c0-0.55,0.45-1,1-1h12c0.55,0,1,0.45,1,1l0,0C19,12.55,18.55,13,18,13z"/>
</svg>
`;
function minus_default() {
  return new DOMParser().parseFromString(svg8, "image/svg+xml").firstChild;
}

// node_modules/mapbox-gl-controls/lib/ZoomControl/ZoomControl.js
var ZoomControl = class extends Base_default {
  constructor() {
    super();
    this.zoomIn = new Button_default();
    this.zoomOut = new Button_default();
  }
  insert() {
    this.addClassName("mapbox-zoom");
    this.zoomIn.setIcon(plus_default());
    this.zoomIn.onClick(() => this.map.zoomIn());
    this.zoomOut.setIcon(minus_default());
    this.zoomOut.onClick(() => this.map.zoomOut());
    this.addButton(this.zoomIn);
    this.addButton(this.zoomOut);
  }
  onAddControl() {
    this.insert();
  }
};
export {
  CompassControl,
  ImageControl,
  InspectControl,
  LanguageControl,
  RulerControl,
  StylesControl,
  TooltipControl,
  ZoomControl
};
//# sourceMappingURL=mapbox-gl-controls.js.map
